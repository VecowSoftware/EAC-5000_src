/**
 * zedx_mode_tbls.h - zedx sensor mode tables
 *
 * Copyright (c) 2022-2023, Stereolabs.  All rights reserved.
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms and conditions of the GNU General Public License,
 * version 2, as published by the Free Software Foundation.
 *
 * This program is distributed in the hope it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
#ifndef __ZEDX_I2C_TABLES__
#define __ZEDX_I2C_TABLES__

#include <media/camera_common.h>

/// Driver Version ///
#define ZEDX_DRIVER_VERSION_MAJOR 0
#define ZEDX_DRIVER_VERSION_MINOR 5
#define ZEDX_DRIVER_VERSION_PATCH 1
#define ZEDX_CUSTOM_INTEGRATION "EAC3000"

#define AR0234_TABLE_WAIT_MS 0xff00
#define AR0234_TABLE_END 0xff01
#define AR0234_MAX_RETRIES 3
#define AR0234_WAIT_MS_STOP 1
#define AR0234_WAIT_MS_START 30
#define AR0234_WAIT_MS_STREAM 210
#define AR0234_GAIN_TABLE_SIZE 255

#define AR0234_EEPROM_ADDRESS 0x54
#define AR0234_EEPROM_ADDRESS_R 0x58
#define AR0234_EEPROM_SIZE 512
#define AR0234_EEPROM_STR_SIZE (AR0234_EEPROM_SIZE * 2)
#define AR0234_EEPROM_BLOCK_SIZE (1 << 8)
#define AR0234_EEPROM_NUM_BLOCKS \
	(AR0234_EEPROM_SIZE / AR0234_EEPROM_BLOCK_SIZE)

#define ar0234_reg struct reg_16


const int verbosity_level=0;

struct index_reg_8
{
	u16 source;
	u16 addr;
	u16 val;
};

static struct index_reg_8 ar0234_start[] = {
	{0x06, 0x30ce, 0x0120},
	{0x06, 0x301A, 0x295C},
	{0x00, AR0234_TABLE_END, 0x00}
};


static struct index_reg_8 ar0234_stop[] = {
	{0x06, 0x301a, 0x2058},
	{0x00, AR0234_TABLE_END, 0x00}};

// ZED-X serializer address
// 0x62 for ZEDX-120/50
// 0x40 for ZEDX-EP150
// [Stereolabs@dev] : --> modified by the ci/build script automatically
#define MAX9295D_ADDRESS_BASE 0x62
 
// Configure the zedx serializer to send the video over GMSL
// todo: do it with the 9296 limitations in mind: for instance
// todo: the output should be 2x4 because the 9296 requires so
// todo: as is it should be
static struct index_reg_8 ar0234_Base_Ser[] = {
 
	{MAX9295D_ADDRESS_BASE, 0x0010, 0x21}, //92 reset path but not registers and auto conf
	{MAX9295D_ADDRESS_BASE, 0x0311, 0x41}, //92 start porta pipe x and port b pipe z
	{MAX9295D_ADDRESS_BASE, 0x0308, 0x7E}, //92 start mipi a and b , a get pipe x and b get pipe z
	{MAX9295D_ADDRESS_BASE, 0x0314, 0x6B}, //92 datatype pipe x = 10 bits raw
	{MAX9295D_ADDRESS_BASE, 0x0318, 0x6B}, //92 datatype pipe z = 10 bits raw
	{MAX9295D_ADDRESS_BASE, 0x0002, 0xff}, //92 vid enable for all ports
	
	//Shutter trigger gpios: x10 address and synchronicity
	{MAX9295D_ADDRESS_BASE, 0x02D9, 0x04}, // MFP9 into gpio and into reception
	{MAX9295D_ADDRESS_BASE, 0x02DB, 0x10}, // MFP9 rx address is x10
	{MAX9295D_ADDRESS_BASE, 0x02Dc, 0x04}, // MFP10 into gpio and into reception
	{MAX9295D_ADDRESS_BASE, 0x02De, 0x10}, // MFP10 rx address is x10
 
 /// For MAX9296 only, modify MFP src for FSIN
#if IS_ENABLED(CONFIG_SL_DESER_MAX9296)
  	{MAX9295D_ADDRESS_BASE,0x02D9,0x04},
	{MAX9295D_ADDRESS_BASE,0x02DB,0x08}, //MFP8 for FSIN
	{MAX9295D_ADDRESS_BASE,0x02Dc,0x04},
	{MAX9295D_ADDRESS_BASE,0x02De,0x08}, //MFP8 for FSIN
#endif 

	// reset camera 0
	{MAX9295D_ADDRESS_BASE, 0x02d3, 0x90}, // MFP7 -> enable reset pin, powerup.
	{MAX9295D_ADDRESS_BASE, 0x02d4, 0x60}, // MFP7 -> rx address is 0

	// reset camera 1
	{MAX9295D_ADDRESS_BASE, 0x02d6, 0x90}, // MFP8 -> enable reset pin, powerup.
	{MAX9295D_ADDRESS_BASE, 0x02d7, 0x60}, // MFP8 -> rx address is 0

	// Remap the eeprom i2c addresses. It has two addresses at x54 and x58
	// This is for the MAX9296 deserializer boards, that come with an eeprom
	// with the same address and on the same bus.
	{MAX9295D_ADDRESS_BASE, 0x0042, 0xB0}, // When the ser receive at x58... eeprom i2c map eeporm have two i2c address
	{MAX9295D_ADDRESS_BASE, 0x0043, 0xA8}, // it remaps at x54
	{MAX9295D_ADDRESS_BASE, 0x0044, 0xB2}, // When the ser receive at x59...
	{MAX9295D_ADDRESS_BASE, 0x0045, 0xAA}, // it remaps at x55

	{0x00, AR0234_TABLE_END, 0x00}
};

 

//Table for HD1200 resolution in ZED SDK
static struct index_reg_8 ar0234_1920x1200_native_60fps[] = {
	{0x06, 0x301A, 0x00D9},
	{0x06, AR0234_TABLE_WAIT_MS, 100},

	{0x06, 0x3F4C, 0x121F},
	{0x06, 0x3F4E, 0x121F},
	{0x06, 0x3F50, 0x0B81},
	{0x06, 0x31E0, 0x0003},
	{0x06, 0x31E0, 0x0003},
	{0x06, 0x30B0, 0x0028},
	{0x06, 0x3088, 0x8000},
	{0x06, 0x3086, 0xC1AE},
	{0x06, 0x3086, 0x327F},
	{0x06, 0x3086, 0x5780},
	{0x06, 0x3086, 0x272F},
	{0x06, 0x3086, 0x7416},
	{0x06, 0x3086, 0x7E13},
	{0x06, 0x3086, 0x8000},
	{0x06, 0x3086, 0x307E},
	{0x06, 0x3086, 0xFF80},
	{0x06, 0x3086, 0x20C3},
	{0x06, 0x3086, 0xB00E},
	{0x06, 0x3086, 0x8190},
	{0x06, 0x3086, 0x1643},
	{0x06, 0x3086, 0x1651},
	{0x06, 0x3086, 0x9D3E},
	{0x06, 0x3086, 0x9545},
	{0x06, 0x3086, 0x2209},
	{0x06, 0x3086, 0x3781},
	{0x06, 0x3086, 0x9016},
	{0x06, 0x3086, 0x4316},
	{0x06, 0x3086, 0x7F90},
	{0x06, 0x3086, 0x8000},
	{0x06, 0x3086, 0x387F},
	{0x06, 0x3086, 0x1380},
	{0x06, 0x3086, 0x233B},
	{0x06, 0x3086, 0x7F93},
	{0x06, 0x3086, 0x4502},
	{0x06, 0x3086, 0x8000},
	{0x06, 0x3086, 0x7FB0},
	{0x06, 0x3086, 0x8D66},
	{0x06, 0x3086, 0x7F90},
	{0x06, 0x3086, 0x8192},
	{0x06, 0x3086, 0x3C16},
	{0x06, 0x3086, 0x357F},
	{0x06, 0x3086, 0x9345},
	{0x06, 0x3086, 0x0280},
	{0x06, 0x3086, 0x007F},
	{0x06, 0x3086, 0xB08D},
	{0x06, 0x3086, 0x667F},
	{0x06, 0x3086, 0x9081},
	{0x06, 0x3086, 0x8237},
	{0x06, 0x3086, 0x4502},
	{0x06, 0x3086, 0x3681},
	{0x06, 0x3086, 0x8044},
	{0x06, 0x3086, 0x1631},
	{0x06, 0x3086, 0x4374},
	{0x06, 0x3086, 0x1678},
	{0x06, 0x3086, 0x7B7D},
	{0x06, 0x3086, 0x4502},
	{0x06, 0x3086, 0x450A},
	{0x06, 0x3086, 0x7E12},
	{0x06, 0x3086, 0x8180},
	{0x06, 0x3086, 0x377F},
	{0x06, 0x3086, 0x1045},
	{0x06, 0x3086, 0x0A0E},
	{0x06, 0x3086, 0x7FD4},
	{0x06, 0x3086, 0x8024},
	{0x06, 0x3086, 0x0E82},
	{0x06, 0x3086, 0x9CC2},
	{0x06, 0x3086, 0xAFA8},
	{0x06, 0x3086, 0xAA03},
	{0x06, 0x3086, 0x430D},
	{0x06, 0x3086, 0x2D46},
	{0x06, 0x3086, 0x4316},
	{0x06, 0x3086, 0x5F16},
	{0x06, 0x3086, 0x530D},
	{0x06, 0x3086, 0x1660},
	{0x06, 0x3086, 0x401E},
	{0x06, 0x3086, 0x2904},
	{0x06, 0x3086, 0x2984},
	{0x06, 0x3086, 0x81E7},
	{0x06, 0x3086, 0x816F},
	{0x06, 0x3086, 0x1706},
	{0x06, 0x3086, 0x81E7},
	{0x06, 0x3086, 0x7F81},
	{0x06, 0x3086, 0x5C0D},
	{0x06, 0x3086, 0x5754},
	{0x06, 0x3086, 0x495F},
	{0x06, 0x3086, 0x5305},
	{0x06, 0x3086, 0x5307},
	{0x06, 0x3086, 0x4D2B},
	{0x06, 0x3086, 0xF810},
	{0x06, 0x3086, 0x164C},
	{0x06, 0x3086, 0x0755},
	{0x06, 0x3086, 0x562B},
	{0x06, 0x3086, 0xB82B},
	{0x06, 0x3086, 0x984E},
	{0x06, 0x3086, 0x1129},
	{0x06, 0x3086, 0x9460},
	{0x06, 0x3086, 0x5C09},
	{0x06, 0x3086, 0x5C1B},
	{0x06, 0x3086, 0x4002},
	{0x06, 0x3086, 0x4500},
	{0x06, 0x3086, 0x4580},
	{0x06, 0x3086, 0x29B6},
	{0x06, 0x3086, 0x7F80},
	{0x06, 0x3086, 0x4004},
	{0x06, 0x3086, 0x7F88},
	{0x06, 0x3086, 0x4109},
	{0x06, 0x3086, 0x5C0B},
	{0x06, 0x3086, 0x29B2},
	{0x06, 0x3086, 0x4115},
	{0x06, 0x3086, 0x5C03},
	{0x06, 0x3086, 0x4105},
	{0x06, 0x3086, 0x5F2B},
	{0x06, 0x3086, 0x902B},
	{0x06, 0x3086, 0x8081},
	{0x06, 0x3086, 0x6F40},
	{0x06, 0x3086, 0x1041},
	{0x06, 0x3086, 0x0160},
	{0x06, 0x3086, 0x29A2},
	{0x06, 0x3086, 0x29A3},
	{0x06, 0x3086, 0x5F4D},
	{0x06, 0x3086, 0x1C17},
	{0x06, 0x3086, 0x0281},
	{0x06, 0x3086, 0xE729},
	{0x06, 0x3086, 0x8345},
	{0x06, 0x3086, 0x8840},
	{0x06, 0x3086, 0x0F7F},
	{0x06, 0x3086, 0x8A40},
	{0x06, 0x3086, 0x2345},
	{0x06, 0x3086, 0x8024},
	{0x06, 0x3086, 0x4008},
	{0x06, 0x3086, 0x7F88},
	{0x06, 0x3086, 0x5D29},
	{0x06, 0x3086, 0x9288},
	{0x06, 0x3086, 0x102B},
	{0x06, 0x3086, 0x0489},
	{0x06, 0x3086, 0x165C},
	{0x06, 0x3086, 0x4386},
	{0x06, 0x3086, 0x170B},
	{0x06, 0x3086, 0x5C03},
	{0x06, 0x3086, 0x8A48},
	{0x06, 0x3086, 0x4D4E},
	{0x06, 0x3086, 0x2B80},
	{0x06, 0x3086, 0x4C09},
	{0x06, 0x3086, 0x4119},
	{0x06, 0x3086, 0x816F},
	{0x06, 0x3086, 0x4110},
	{0x06, 0x3086, 0x4001},
	{0x06, 0x3086, 0x6029},
	{0x06, 0x3086, 0x8229},
	{0x06, 0x3086, 0x8329},
	{0x06, 0x3086, 0x435C},
	{0x06, 0x3086, 0x055F},
	{0x06, 0x3086, 0x4D1C},
	{0x06, 0x3086, 0x81E7},
	{0x06, 0x3086, 0x4502},
	{0x06, 0x3086, 0x8180},
	{0x06, 0x3086, 0x7F80},
	{0x06, 0x3086, 0x410A},
	{0x06, 0x3086, 0x9144},
	{0x06, 0x3086, 0x1609},
	{0x06, 0x3086, 0x2FC3},
	{0x06, 0x3086, 0xB130},
	{0x06, 0x3086, 0xC3B1},
	{0x06, 0x3086, 0x0343},
	{0x06, 0x3086, 0x164A},
	{0x06, 0x3086, 0x0A43},
	{0x06, 0x3086, 0x160B},
	{0x06, 0x3086, 0x4316},
	{0x06, 0x3086, 0x8F43},
	{0x06, 0x3086, 0x1690},
	{0x06, 0x3086, 0x4316},
	{0x06, 0x3086, 0x7F81},
	{0x06, 0x3086, 0x450A},
	{0x06, 0x3086, 0x410F},
	{0x06, 0x3086, 0x7F83},
	{0x06, 0x3086, 0x5D29},
	{0x06, 0x3086, 0x4488},
	{0x06, 0x3086, 0x102B},
	{0x06, 0x3086, 0x0453},
	{0x06, 0x3086, 0x0D40},
	{0x06, 0x3086, 0x2345},
	{0x06, 0x3086, 0x0240},
	{0x06, 0x3086, 0x087F},
	{0x06, 0x3086, 0x8053},
	{0x06, 0x3086, 0x0D89},
	{0x06, 0x3086, 0x165C},
	{0x06, 0x3086, 0x4586},
	{0x06, 0x3086, 0x170B},
	{0x06, 0x3086, 0x5C05},
	{0x06, 0x3086, 0x8A60},
	{0x06, 0x3086, 0x4B91},
	{0x06, 0x3086, 0x4416},
	{0x06, 0x3086, 0x09C1},
	{0x06, 0x3086, 0x2CA9},
	{0x06, 0x3086, 0xAB30},
	{0x06, 0x3086, 0x51B3},
	{0x06, 0x3086, 0x3D5A},
	{0x06, 0x3086, 0x7E3D},
	{0x06, 0x3086, 0x7E19},
	{0x06, 0x3086, 0x8000},
	{0x06, 0x3086, 0x8B1F},
	{0x06, 0x3086, 0x2A1F},
	{0x06, 0x3086, 0x83A2},
	{0x06, 0x3086, 0x7516},
	{0x06, 0x3086, 0xAD33},
	{0x06, 0x3086, 0x450A},
	{0x06, 0x3086, 0x7F53},
	{0x06, 0x3086, 0x8023},
	{0x06, 0x3086, 0x8C66},
	{0x06, 0x3086, 0x7F13},
	{0x06, 0x3086, 0x8184},
	{0x06, 0x3086, 0x1481},
	{0x06, 0x3086, 0x8031},
	{0x06, 0x3086, 0x3D64},
	{0x06, 0x3086, 0x452A},
	{0x06, 0x3086, 0x9451},
	{0x06, 0x3086, 0x9E96},
	{0x06, 0x3086, 0x3D2B},
	{0x06, 0x3086, 0x3D1B},
	{0x06, 0x3086, 0x529F},
	{0x06, 0x3086, 0x0E3D},
	{0x06, 0x3086, 0x083D},
	{0x06, 0x3086, 0x167E},
	{0x06, 0x3086, 0x307E},
	{0x06, 0x3086, 0x1175},
	{0x06, 0x3086, 0x163E},
	{0x06, 0x3086, 0x970E},
	{0x06, 0x3086, 0x82B2},
	{0x06, 0x3086, 0x3D7F},
	{0x06, 0x3086, 0xAC3E},
	{0x06, 0x3086, 0x4502},
	{0x06, 0x3086, 0x7E11},
	{0x06, 0x3086, 0x7FD0},
	{0x06, 0x3086, 0x8000},
	{0x06, 0x3086, 0x8C66},
	{0x06, 0x3086, 0x7F90},
	{0x06, 0x3086, 0x8194},
	{0x06, 0x3086, 0x3F44},
	{0x06, 0x3086, 0x1681},
	{0x06, 0x3086, 0x8416},
	{0x06, 0x3086, 0x2C2C},
	{0x06, 0x3086, 0x2C2C},
	{0x06, 0x302A, 0x0005},
	{0x06, 0x302C, 0x0001},
	{0x06, 0x302E, 0x0003},
	//	{0x06,0x3030, 0x0030},
	{0x06, 0x3030, 0x0020},

	{0x06, 0x3036, 0x000A},
	{0x06, 0x3038, 0x0001},
	{0x06, 0x30B0, 0x0028},
	{0x06, 0x31B0, 0x0082},
	{0x06, 0x31B2, 0x005C},
	{0x06, 0x31B4, 0x5248},
	{0x06, 0x31B6, 0x3257},
	{0x06, 0x31B8, 0x904B},
	{0x06, 0x31BA, 0x030B},
	{0x06, 0x31BC, 0x8E09},
	{0x06, 0x3354, 0x002B},
	{0x06, 0x31AE, 0x0204},
	{0x06, 0x3002, 0x0008},
	{0x06, 0x3004, 0x0008},

	{0x06, 0x3006, 0x04B7}, //Y address end (1207)
	{0x06, 0x3008, 0x0787}, //X address end (1927)
	{0x06, 0x300A, 0x04c8},
    {0x06, 0x300C, 0x0264},
	{0x06, 0x3012, 0x00DC},
	{0x06, 0x31AC, 0x0A0A}, // DATA_FORMAT_BITS = 2570
	{0x06, 0x306E, 0x9010}, // DATAPATH_SELECT = 36880
	{0x06, 0x30A2, 0x0001}, // X_ODD_INC = 1
	{0x06, 0x30A6, 0x0001}, // Y_ODD_INC = 1
	{0x06, 0x3082, 0x0003}, // OPERATION_MODE_CTRL = 3
	{0x06, 0x3040, 0xC000}, // READ_MODE = 0 ///FLIP/FLIP 0 = normal ZED-X must be flipped/flopped
	{0x06, 0x31D0, 0x0000}, // COMPANDING = 0
	{0x06, 0x301A, 0x205C},
	{0x06, AR0234_TABLE_WAIT_MS, 100},
	{0x06, 0x3044, 0x0410},
	{0x06, 0x3094, 0x03D4},
	{0x06, 0x3096, 0x0480},
	{0x06, 0x30BA, 0x7602},
	{0x06, 0x30B0, 0x0028},
	{0x06, 0x30FE, 0x002A},
	{0x06, 0x31DE, 0x0410},
	{0x06, 0x3ED6, 0x1435},
	{0x06, 0x3ED8, 0x9865},
	{0x06, 0x3EDA, 0x7698},
	{0x06, 0x3EDC, 0x99FF},
	{0x06, 0x3EE2, 0xBB88},
	{0x06, 0x3EE4, 0x8836},
	{0x06, 0x3EF0, 0x1CF0},
	{0x06, 0x3EF2, 0x0000},
	{0x06, 0x3EF8, 0x6166},
	{0x06, 0x3EFA, 0x3333},
	{0x06, 0x3EFC, 0x6634},
	{0x06, 0x3276, 0x05DC},
	{0x06, 0x3F00, 0x9D05},
	{0x06, 0x3ED2, 0xFA86},
	{0x06, 0x3EEE, 0xA4FE},
	{0x06, 0x30BA, 0x7602},
	{0x06, 0x3180, 0xC24F},
	{0x06, 0x3ECC, 0x6E42},
	{0x06, 0x3ECC, 0x0E42},
	{0x06, 0x3EEC, 0x0C0C},
	{0x06, 0x3EE8, 0xAAE4},
	{0x06, 0x3EE6, 0x3363},
	{0x06, 0x3EE6, 0x3363},
	{0x06, 0x3EE8, 0xAAE4},
	{0x06, 0x3EE8, 0xAAE4},
	{0x06, 0x3102, 0x5000},
	{0x06, 0x3060, 0x000D},
	{0x06, 0x3ED0, 0xFF44},
	{0x06, 0x3ED2, 0xAA86},
	{0x06, 0x3ED4, 0x031F},
	{0x06, 0x3EEE, 0xA4AA},
	{0x06, 0x301a, 0x2058},

	{0x06, 0x3034, 0x0000}, // reset address pointer
	{0x06, 0x3066, 0xF863}, // set 7 (6+1) contexts bit7-4, high address 0x3
	{0x06, 0x3066, 0x0809}, // set address x3012, CIT
	{0x06, 0x3066, 0x0010}, // context 0
	{0x06, 0x3066, 0x0100}, // context 1
	{0x06, 0x3066, 0x0200}, // context 2
	{0x06, 0x3066, 0x0040}, // context 3
	{0x06, 0x3066, 0x0050}, // context 4
	{0x06, 0x3066, 0x0060}, // context 5
	{0x06, 0x3066, 0x0070}, // context 6
	{0x06, 0x3066, 0xF863}, // set 7 contexts bit7-4, high address 0x3
	{0x06, 0x3066, 0x0830}, // set address x3060, analog gain
	{0x06, 0x3066, 0x0010}, // context 0
	{0x06, 0x3066, 0x0010}, // context 1
	{0x06, 0x3066, 0x0020}, // context 2
	{0x06, 0x3066, 0x0020}, // context 3
	{0x06, 0x3066, 0x0030}, // context 4
	{0x06, 0x3066, 0x0030}, // context 5
	{0x06, 0x3066, 0x0040}, // context 6
	{0x06, 0x3066, 0x0000}, // end of code
	{0x06, 0x3034, 0x0220}, // stop auto cycling
	{0x00, AR0234_TABLE_END, 0x00},
};

//Table for SVGA resolution in ZED SDK
static struct index_reg_8 ar0234_960x600_binning_120fps[] = {
	{0x06, 0x301A, 0x00D9}, //RESET_REGISTER [11011001]
	{0x06, AR0234_TABLE_WAIT_MS, 100},
	{0x06, 0x3F4C, 0x121F},
	{0x06, 0x3F4E, 0x121F},
	{0x06, 0x3F50, 0x0B81},
	{0x06, 0x31E0, 0x0003}, //PIX_DEF_ID (R/W) [0011]
	{0x06, 0x30B0, 0x0028}, // If 30BO[7]==1 , then 3040[5] must be 1 (sum instead of average)
	{0x06, 0x302A, 0x0005},
	{0x06, 0x302C, 0x0001},
	{0x06, 0x302E, 0x0003},
	{0x06, 0x3030, 0x0020},
	{0x06, 0x3036, 0x000A},
	{0x06, 0x3038, 0x0001},
	{0x06, 0x31B0, 0x0082},
	{0x06, 0x31B2, 0x005C},
	{0x06, 0x31B4, 0x51C8},
	{0x06, 0x31B6, 0x3257},
	{0x06, 0x31B8, 0x904B},
	{0x06, 0x31BA, 0x030B},
	{0x06, 0x31BC, 0x8E09},
	{0x06, 0x3354, 0x002B},
	{0x06, 0x31D0, 0x0000},
	{0x06, 0x31AE, 0x0204},
	///Windowing (1200p Native for Bin)
	{0x06, 0x3002, 0x0008}, //Y address start (8 pixel)
	{0x06, 0x3004, 0x0008}, //X address start (8 pixel)
	{0x06, 0x3006, 0x04B7}, //Y address end (1207)
	{0x06, 0x3008, 0x0787}, //X address end (1927)
	{0x06, 0x300A, 0x0264}, //FRAME_LENGTH_LINES (R/W) = 1224/2
	{0x06, 0x300C, 0x0264}, //LINE_LENGTH_PCK (R/W) = 612
	//Skip/Bin
	{0x06, 0x30A2, 0x0003}, // (SKip/Bin H)
	{0x06, 0x30A6, 0x0003}, // (Skip/Bin V)
	{0x06, 0x3012, 0x00DC},
	{0x06, 0x3786, 0x0006},
	{0x06, 0x31AC, 0x0A0A},
	{0x06, 0x306E, 0x9010},
	{0x06, 0x3082, 0x0003},
	// 0x3040 --> Select Read Mode (Flip/Flop) + Binning/Skipping choice
	{0x06, 0x3040, 0xF000}, //READ OUT --> Flip/Flop 0x3040[14] && 0x3040[15].  0x3040[13]/[12] == 1 for Binning
	{0x06, 0x3088, 0x8050},
	{0x06, 0x3086, 0x9237},
	{0x06, 0x3096, 0x0280},
	{0x06, 0x3180, 0xC24F},
	{0x06, 0x3ECC, 0x0E42},
	{0x06, 0x30BA, 0x7602},
	{0x06, 0x30F0, 0x2283},
	{0x06, 0x3102, 0x5000},
	{0x06, 0x3060, 0x000D},
	{0x06, 0x3ED2, 0xAA00},
	{0x06, 0x3EEE, 0xA4AA},
	{0x00, AR0234_TABLE_END, 0x00},
};

//Table for HD1080 resolution in ZED SDK
static struct index_reg_8 ar0234_1920x1080_crop_60fps[] = {
	{0x06, 0x301A, 0x00D9}, //RESET_REGISTER [11011001]
	{0x06, AR0234_TABLE_WAIT_MS, 100},
	{0x06, 0x3F4C, 0x121F},
	{0x06, 0x3F4E, 0x121F},
	{0x06, 0x3F50, 0x0B81},
	{0x06, 0x31E0, 0x0003}, //PIX_DEF_ID (R/W) [0011]

	{0x06, 0x30B0, 0x0028},
	{0x06, 0x3088, 0x8000},
	{0x06, 0x3086, 0xC1AE},
	{0x06, 0x3086, 0x327F},
	{0x06, 0x3086, 0x5780},
	{0x06, 0x3086, 0x272F},
	{0x06, 0x3086, 0x7416},
	{0x06, 0x3086, 0x7E13},
	{0x06, 0x3086, 0x8000},
	{0x06, 0x3086, 0x307E},
	{0x06, 0x3086, 0xFF80},
	{0x06, 0x3086, 0x20C3},
	{0x06, 0x3086, 0xB00E},
	{0x06, 0x3086, 0x8190},
	{0x06, 0x3086, 0x1643},
	{0x06, 0x3086, 0x1651},
	{0x06, 0x3086, 0x9D3E},
	{0x06, 0x3086, 0x9545},
	{0x06, 0x3086, 0x2209},
	{0x06, 0x3086, 0x3781},
	{0x06, 0x3086, 0x9016},
	{0x06, 0x3086, 0x4316},
	{0x06, 0x3086, 0x7F90},
	{0x06, 0x3086, 0x8000},
	{0x06, 0x3086, 0x387F},
	{0x06, 0x3086, 0x1380},
	{0x06, 0x3086, 0x233B},
	{0x06, 0x3086, 0x7F93},
	{0x06, 0x3086, 0x4502},
	{0x06, 0x3086, 0x8000},
	{0x06, 0x3086, 0x7FB0},
	{0x06, 0x3086, 0x8D66},
	{0x06, 0x3086, 0x7F90},
	{0x06, 0x3086, 0x8192},
	{0x06, 0x3086, 0x3C16},
	{0x06, 0x3086, 0x357F},
	{0x06, 0x3086, 0x9345},
	{0x06, 0x3086, 0x0280},
	{0x06, 0x3086, 0x007F},
	{0x06, 0x3086, 0xB08D},
	{0x06, 0x3086, 0x667F},
	{0x06, 0x3086, 0x9081},
	{0x06, 0x3086, 0x8237},
	{0x06, 0x3086, 0x4502},
	{0x06, 0x3086, 0x3681},
	{0x06, 0x3086, 0x8044},
	{0x06, 0x3086, 0x1631},
	{0x06, 0x3086, 0x4374},
	{0x06, 0x3086, 0x1678},
	{0x06, 0x3086, 0x7B7D},
	{0x06, 0x3086, 0x4502},
	{0x06, 0x3086, 0x450A},
	{0x06, 0x3086, 0x7E12},
	{0x06, 0x3086, 0x8180},
	{0x06, 0x3086, 0x377F},
	{0x06, 0x3086, 0x1045},
	{0x06, 0x3086, 0x0A0E},
	{0x06, 0x3086, 0x7FD4},
	{0x06, 0x3086, 0x8024},
	{0x06, 0x3086, 0x0E82},
	{0x06, 0x3086, 0x9CC2},
	{0x06, 0x3086, 0xAFA8},
	{0x06, 0x3086, 0xAA03},
	{0x06, 0x3086, 0x430D},
	{0x06, 0x3086, 0x2D46},
	{0x06, 0x3086, 0x4316},
	{0x06, 0x3086, 0x5F16},
	{0x06, 0x3086, 0x530D},
	{0x06, 0x3086, 0x1660},
	{0x06, 0x3086, 0x401E},
	{0x06, 0x3086, 0x2904},
	{0x06, 0x3086, 0x2984},
	{0x06, 0x3086, 0x81E7},
	{0x06, 0x3086, 0x816F},
	{0x06, 0x3086, 0x1706},
	{0x06, 0x3086, 0x81E7},
	{0x06, 0x3086, 0x7F81},
	{0x06, 0x3086, 0x5C0D},
	{0x06, 0x3086, 0x5754},
	{0x06, 0x3086, 0x495F},
	{0x06, 0x3086, 0x5305},
	{0x06, 0x3086, 0x5307},
	{0x06, 0x3086, 0x4D2B},
	{0x06, 0x3086, 0xF810},
	{0x06, 0x3086, 0x164C},
	{0x06, 0x3086, 0x0755},
	{0x06, 0x3086, 0x562B},
	{0x06, 0x3086, 0xB82B},
	{0x06, 0x3086, 0x984E},
	{0x06, 0x3086, 0x1129},
	{0x06, 0x3086, 0x9460},
	{0x06, 0x3086, 0x5C09},
	{0x06, 0x3086, 0x5C1B},
	{0x06, 0x3086, 0x4002},
	{0x06, 0x3086, 0x4500},
	{0x06, 0x3086, 0x4580},
	{0x06, 0x3086, 0x29B6},
	{0x06, 0x3086, 0x7F80},
	{0x06, 0x3086, 0x4004},
	{0x06, 0x3086, 0x7F88},
	{0x06, 0x3086, 0x4109},
	{0x06, 0x3086, 0x5C0B},
	{0x06, 0x3086, 0x29B2},
	{0x06, 0x3086, 0x4115},
	{0x06, 0x3086, 0x5C03},
	{0x06, 0x3086, 0x4105},
	{0x06, 0x3086, 0x5F2B},
	{0x06, 0x3086, 0x902B},
	{0x06, 0x3086, 0x8081},
	{0x06, 0x3086, 0x6F40},
	{0x06, 0x3086, 0x1041},
	{0x06, 0x3086, 0x0160},
	{0x06, 0x3086, 0x29A2},
	{0x06, 0x3086, 0x29A3},
	{0x06, 0x3086, 0x5F4D},
	{0x06, 0x3086, 0x1C17},
	{0x06, 0x3086, 0x0281},
	{0x06, 0x3086, 0xE729},
	{0x06, 0x3086, 0x8345},
	{0x06, 0x3086, 0x8840},
	{0x06, 0x3086, 0x0F7F},
	{0x06, 0x3086, 0x8A40},
	{0x06, 0x3086, 0x2345},
	{0x06, 0x3086, 0x8024},
	{0x06, 0x3086, 0x4008},
	{0x06, 0x3086, 0x7F88},
	{0x06, 0x3086, 0x5D29},
	{0x06, 0x3086, 0x9288},
	{0x06, 0x3086, 0x102B},
	{0x06, 0x3086, 0x0489},
	{0x06, 0x3086, 0x165C},
	{0x06, 0x3086, 0x4386},
	{0x06, 0x3086, 0x170B},
	{0x06, 0x3086, 0x5C03},
	{0x06, 0x3086, 0x8A48},
	{0x06, 0x3086, 0x4D4E},
	{0x06, 0x3086, 0x2B80},
	{0x06, 0x3086, 0x4C09},
	{0x06, 0x3086, 0x4119},
	{0x06, 0x3086, 0x816F},
	{0x06, 0x3086, 0x4110},
	{0x06, 0x3086, 0x4001},
	{0x06, 0x3086, 0x6029},
	{0x06, 0x3086, 0x8229},
	{0x06, 0x3086, 0x8329},
	{0x06, 0x3086, 0x435C},
	{0x06, 0x3086, 0x055F},
	{0x06, 0x3086, 0x4D1C},
	{0x06, 0x3086, 0x81E7},
	{0x06, 0x3086, 0x4502},
	{0x06, 0x3086, 0x8180},
	{0x06, 0x3086, 0x7F80},
	{0x06, 0x3086, 0x410A},
	{0x06, 0x3086, 0x9144},
	{0x06, 0x3086, 0x1609},
	{0x06, 0x3086, 0x2FC3},
	{0x06, 0x3086, 0xB130},
	{0x06, 0x3086, 0xC3B1},
	{0x06, 0x3086, 0x0343},
	{0x06, 0x3086, 0x164A},
	{0x06, 0x3086, 0x0A43},
	{0x06, 0x3086, 0x160B},
	{0x06, 0x3086, 0x4316},
	{0x06, 0x3086, 0x8F43},
	{0x06, 0x3086, 0x1690},
	{0x06, 0x3086, 0x4316},
	{0x06, 0x3086, 0x7F81},
	{0x06, 0x3086, 0x450A},
	{0x06, 0x3086, 0x410F},
	{0x06, 0x3086, 0x7F83},
	{0x06, 0x3086, 0x5D29},
	{0x06, 0x3086, 0x4488},
	{0x06, 0x3086, 0x102B},
	{0x06, 0x3086, 0x0453},
	{0x06, 0x3086, 0x0D40},
	{0x06, 0x3086, 0x2345},
	{0x06, 0x3086, 0x0240},
	{0x06, 0x3086, 0x087F},
	{0x06, 0x3086, 0x8053},
	{0x06, 0x3086, 0x0D89},
	{0x06, 0x3086, 0x165C},
	{0x06, 0x3086, 0x4586},
	{0x06, 0x3086, 0x170B},
	{0x06, 0x3086, 0x5C05},
	{0x06, 0x3086, 0x8A60},
	{0x06, 0x3086, 0x4B91},
	{0x06, 0x3086, 0x4416},
	{0x06, 0x3086, 0x09C1},
	{0x06, 0x3086, 0x2CA9},
	{0x06, 0x3086, 0xAB30},
	{0x06, 0x3086, 0x51B3},
	{0x06, 0x3086, 0x3D5A},
	{0x06, 0x3086, 0x7E3D},
	{0x06, 0x3086, 0x7E19},
	{0x06, 0x3086, 0x8000},
	{0x06, 0x3086, 0x8B1F},
	{0x06, 0x3086, 0x2A1F},
	{0x06, 0x3086, 0x83A2},
	{0x06, 0x3086, 0x7516},
	{0x06, 0x3086, 0xAD33},
	{0x06, 0x3086, 0x450A},
	{0x06, 0x3086, 0x7F53},
	{0x06, 0x3086, 0x8023},
	{0x06, 0x3086, 0x8C66},
	{0x06, 0x3086, 0x7F13},
	{0x06, 0x3086, 0x8184},
	{0x06, 0x3086, 0x1481},
	{0x06, 0x3086, 0x8031},
	{0x06, 0x3086, 0x3D64},
	{0x06, 0x3086, 0x452A},
	{0x06, 0x3086, 0x9451},
	{0x06, 0x3086, 0x9E96},
	{0x06, 0x3086, 0x3D2B},
	{0x06, 0x3086, 0x3D1B},
	{0x06, 0x3086, 0x529F},
	{0x06, 0x3086, 0x0E3D},
	{0x06, 0x3086, 0x083D},
	{0x06, 0x3086, 0x167E},
	{0x06, 0x3086, 0x307E},
	{0x06, 0x3086, 0x1175},
	{0x06, 0x3086, 0x163E},
	{0x06, 0x3086, 0x970E},
	{0x06, 0x3086, 0x82B2},
	{0x06, 0x3086, 0x3D7F},
	{0x06, 0x3086, 0xAC3E},
	{0x06, 0x3086, 0x4502},
	{0x06, 0x3086, 0x7E11},
	{0x06, 0x3086, 0x7FD0},
	{0x06, 0x3086, 0x8000},
	{0x06, 0x3086, 0x8C66},
	{0x06, 0x3086, 0x7F90},
	{0x06, 0x3086, 0x8194},
	{0x06, 0x3086, 0x3F44},
	{0x06, 0x3086, 0x1681},
	{0x06, 0x3086, 0x8416},
	{0x06, 0x3086, 0x2C2C},
	{0x06, 0x3086, 0x2C2C},
	{0x06, 0x302A, 0x0005},
	{0x06, 0x302C, 0x0001},
	{0x06, 0x302E, 0x0003},
	//	{0x06,0x3030, 0x0030},
	{0x06, 0x3030, 0x0020},

	{0x06, 0x3036, 0x000A},
	{0x06, 0x3038, 0x0001},
	{0x06, 0x30B0, 0x0028},
	{0x06, 0x31B0, 0x0082},
	{0x06, 0x31B2, 0x005C},
	{0x06, 0x31B4, 0x5248},
	{0x06, 0x31B6, 0x3257},
	{0x06, 0x31B8, 0x904B},
	{0x06, 0x31BA, 0x030B},
	{0x06, 0x31BC, 0x8E09},
	{0x06, 0x3354, 0x002B},
	{0x06, 0x31AE, 0x0204},

		///Windowing (1080p)
	{0x06, 0x3002, 0x0044}, //Y address start (60 + 8 pixel)
	{0x06, 0x3004, 0x0008}, //X address start (8 pixel)
	{0x06, 0x3006, 0x047B}, //Y address end (1207-60)
	{0x06, 0x3008, 0x0787}, //X address end (1927)
	{0x06, 0x300A, 0x04c8},
	{0x06, 0x300C, 0x0264}, 
	{0x06, 0x3012, 0x00DC},
	{0x06, 0x31AC, 0x0A0A}, // DATA_FORMAT_BITS = 2570
	{0x06, 0x306E, 0x9010}, // DATAPATH_SELECT = 36880
	{0x06, 0x30A2, 0x0001}, // X_ODD_INC = 1 (No skip)
	{0x06, 0x30A6, 0x0001}, // Y_ODD_INC = 1 (No skip)
	{0x06, 0x3082, 0x0003}, // OPERATION_MODE_CTRL = 3
	{0x06, 0x3040, 0xC000}, // READ_MODE = 0 ///FLIP/FLIP 0 = normal ZED-X must be flipped/flopped
	{0x06, 0x31D0, 0x0000}, // COMPANDING = 0
	{0x06, 0x301A, 0x205C},
	{0x06, AR0234_TABLE_WAIT_MS, 100},
	{0x06, 0x3044, 0x0410},
	{0x06, 0x3094, 0x03D4},
	{0x06, 0x3096, 0x0480},
	{0x06, 0x30BA, 0x7602},
	{0x06, 0x30B0, 0x0028},
	{0x06, 0x30FE, 0x002A},
	{0x06, 0x31DE, 0x0410},
	{0x06, 0x3ED6, 0x1435},
	{0x06, 0x3ED8, 0x9865},
	{0x06, 0x3EDA, 0x7698},
	{0x06, 0x3EDC, 0x99FF},
	{0x06, 0x3EE2, 0xBB88},
	{0x06, 0x3EE4, 0x8836},
	{0x06, 0x3EF0, 0x1CF0},
	{0x06, 0x3EF2, 0x0000},
	{0x06, 0x3EF8, 0x6166},
	{0x06, 0x3EFA, 0x3333},
	{0x06, 0x3EFC, 0x6634},
	{0x06, 0x3276, 0x05DC},
	{0x06, 0x3F00, 0x9D05},
	{0x06, 0x3ED2, 0xFA86},
	{0x06, 0x3EEE, 0xA4FE},
	{0x06, 0x30BA, 0x7602},
	{0x06, 0x3180, 0xC24F},
	{0x06, 0x3ECC, 0x6E42},
	{0x06, 0x3ECC, 0x0E42},
	{0x06, 0x3EEC, 0x0C0C},
	{0x06, 0x3EE8, 0xAAE4},
	{0x06, 0x3EE6, 0x3363},
	{0x06, 0x3EE6, 0x3363},
	{0x06, 0x3EE8, 0xAAE4},
	{0x06, 0x3EE8, 0xAAE4},
	{0x06, 0x3102, 0x5000},
	{0x06, 0x3060, 0x000D},
	{0x06, 0x3ED0, 0xFF44},
	{0x06, 0x3ED2, 0xAA86},
	{0x06, 0x3ED4, 0x031F},
	{0x06, 0x3EEE, 0xA4AA},
	{0x06, 0x301a, 0x2058},

	{0x06, 0x3034, 0x0000}, // reset address pointer
	{0x06, 0x3066, 0xF863}, // set 7 (6+1) contexts bit7-4, high address 0x3
	{0x06, 0x3066, 0x0809}, // set address x3012, CIT
	{0x06, 0x3066, 0x0010}, // context 0
	{0x06, 0x3066, 0x0100}, // context 1
	{0x06, 0x3066, 0x0200}, // context 2
	{0x06, 0x3066, 0x0040}, // context 3
	{0x06, 0x3066, 0x0050}, // context 4
	{0x06, 0x3066, 0x0060}, // context 5
	{0x06, 0x3066, 0x0070}, // context 6
	{0x06, 0x3066, 0xF863}, // set 7 contexts bit7-4, high address 0x3
	{0x06, 0x3066, 0x0830}, // set address x3060, analog gain
	{0x06, 0x3066, 0x0010}, // context 0
	{0x06, 0x3066, 0x0010}, // context 1
	{0x06, 0x3066, 0x0020}, // context 2
	{0x06, 0x3066, 0x0020}, // context 3
	{0x06, 0x3066, 0x0030}, // context 4
	{0x06, 0x3066, 0x0030}, // context 5
	{0x06, 0x3066, 0x0040}, // context 6
	{0x06, 0x3066, 0x0000}, // end of code

	{0x06, 0x3034, 0x0220}, // stop auto cycling
	{0x00, AR0234_TABLE_END, 0x00},
};

static struct index_reg_8 ar0234_context_switch[] = {

	{0x06, 0x3034, 0x0220}, // stop auto cycling
	{0x06, AR0234_TABLE_WAIT_MS, 100},
	{0x06, 0x3034, 0x02A0}, // start auto cycling
};

static struct index_reg_8 tp_colorbars[] = {
	{0x06, 0x3070, 0x2},
	{0x00, AR0234_TABLE_END, 0x00},
};

enum
{
	AR0234_MODE_1920X1200_NATIVE_60FPS,
	AR0234_MODE_960X600_BINNING_120FPS,
	AR0234_MODE_1920X1080_CROP_60FPS,
	AR0234_MODE_START_STREAM,
	AR0234_MODE_STOP_STREAM,
	AR0234_MODE_BASE_SER,
	AR0234_MODE_TEST_PATTERN,
	AR0234_MODE_CONTEXT_SWITCH
};

static struct index_reg_8 *mode_table[] = {
	[AR0234_MODE_1920X1200_NATIVE_60FPS] = ar0234_1920x1200_native_60fps,
	[AR0234_MODE_960X600_BINNING_120FPS] = ar0234_960x600_binning_120fps,
	[AR0234_MODE_1920X1080_CROP_60FPS] = ar0234_1920x1080_crop_60fps,
	[AR0234_MODE_START_STREAM] = ar0234_start,
	[AR0234_MODE_STOP_STREAM] = ar0234_stop,
	[AR0234_MODE_BASE_SER] = ar0234_Base_Ser,
	[AR0234_MODE_TEST_PATTERN] = tp_colorbars,
	[AR0234_MODE_CONTEXT_SWITCH] = ar0234_context_switch

};

static const int ar0234_60fps[] = {
	30,
	60};

static const int ar0234_120fps[] = {
	60,
	120};

static const struct camera_common_frmfmt ar0234_frmfmt[] = {
	{{1920, 1200}, ar0234_60fps, 2, 0, AR0234_MODE_1920X1200_NATIVE_60FPS},
	{{960, 600}, ar0234_120fps, 2, 0, AR0234_MODE_960X600_BINNING_120FPS},
	{{1920, 1080}, ar0234_60fps, 2, 0, AR0234_MODE_1920X1080_CROP_60FPS}
};
#endif /* __ZEDX_I2C_TABLES__ */
